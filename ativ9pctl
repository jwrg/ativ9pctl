#!/bin/bash

# This script is a wrapper for some functionality on Samsung Ativ Book 9 Plus
# laptops, with the intention that these functions be mapped to the fn-keys
# using a window manager (in my case, dwm).  It is provided as-is; use at your
# own risk.
#
# For reference, the function key x11 hex reference will be given with the
# corresponding function.

# Globals

ATIV_USER=your_user_name_goes_here
ATIV_BKLT=/sys/class/backlight/intel_backlight/

# Argument default values
BRT_DELTA=0
VOL_DELTA=0

# Reset in case getopts has been invoked previously
#OPTIND=1

# Logging function
#
# Output something to console iff the verbose flag is set

VERBOSE=0
log () { 
  if [[ $VERBOSE -eq 1 ]]; then 
    echo "$@" 
  fi 
}

# Put the system into suspend and lock the screen
#
# This is a simple function that does two things:
#
# 1) suspends the system in the background, and
# 2) locks the screen
#
# For information on making pm-suspend work, see the following URL:
# https://wiki.gentoo.org/wiki/Suspend_and_hibernate
#
# This can be mapped to the launch key (Fn + F1)
# Launch key hex reference: 0x1008ff41
#
# NB script needs root/sudo elevation for this to work

laptop_suspend () {
  pm-suspend &
  su -c slock -l $ATIV_USER
}

# Control the brightness of the screen backlight
#
# This queries for the backlight brightness and max brightness in /sys/, and
# expects a parameter from the command line, which is how much you want to
# brighten the screen (negative values darken the backlight).
#
# Brightness up key hex reference: 0x1008ff02
# Brightness down key hex reference: 0x1008ff03
#
# NB script needs root/sudo elevation for this to work

brightness () {
  brt_target="${ATIV_BKLT}brightness"
  max_target="${ATIV_BKLT}max_brightness"

  brightness=$(<$brt_target)
  new_brightness=$(($brightness+$BRT_DELTA))
  max_brightness=$(<$max_target)
  log "current brightness: $brightness, incrementing by $BRT_DELTA"

  if [ $new_brightness -gt $max_brightness ]; then
    log "brightness set to maximum value!"
    echo $max_brightness > $brt_target
  elif [ $new_brightness -lt 0 ]; then
    log "brightness set to minimum value!"
    echo 1 > $brt_target
  else
    log "new brightness: $new_brightness"
    echo $new_brightness > $brt_target
  fi
}

# Control the sound volume
#
# This expects an integer parameter from the command line, which it then uses
# to change the sound output volume using a common command line mixer program.
# The given parameter does the following:
#
# Positive parameter => increase the volume by a given percentage
# Negative parameter => decrease the volume by a given percentage
# Zero parameter => mute the volume
#
# The NP940 has only the one output, so it should be unambiguous as to what
# this function controls.
#
# Volume up key hex reference: 0x1008ff13
# Volume down key hex reference: 0x1008ff11
# Mute key hex reference: 0x1008ff12
#
# NB this function SHOULD NOT be run as root, which will not change the volume
# as expected.

volume () {
  if [ $VOL_DELTA -eq 0 ]; then
    log "muting volume"
    amixer set Master 1+ toggle -q
  elif [ $VOL_DELTA -lt 0 ]; then
    log "decreading volume by $VOL_DELTA"
	amixer set Master ${VOL_DELTA#-}%- -qM
  else
    log "increasing volume by $VOL_DELTA"
    amixer set Master $VOL_DELTA%+ -qM
  fi
}

# Main control sequence
#!/bin/bash

if [[ "$1" =~ ^((-{1,2})([Hh]$|[Hh][Ee][Ll][Pp])|)$ ]]; then
  show_help; exit 1
else
  while [[ $# -gt 0 ]]; do
    opt="$1"
    shift;
    current_arg="$1"
    case "$opt" in
      "-v"|"--vervose"    ) ;;
      "-b"|"--brightness" ) BRT_DELTA="$1"; brightness; shift;;
      "-l"|"--volume"     ) VOL_DELTA="$1"; volume; shift;;
      "-s"|"--suspend"    ) laptop_suspend ;;
      *                   ) echo "ERROR: Invalid option: \""$opt"\"" >&2
                            exit 1;;
    esac
  done
fi

# EOF
